<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SukeYang的博客</title>
  <subtitle>记录下自己学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sukeyang.github.io/"/>
  <updated>2017-02-28T02:35:15.000Z</updated>
  <id>https://sukeyang.github.io/</id>
  
  <author>
    <name>SukeYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Masonry解析</title>
    <link href="https://sukeyang.github.io/2017/02/28/Masonry%E8%A7%A3%E6%9E%90/"/>
    <id>https://sukeyang.github.io/2017/02/28/Masonry解析/</id>
    <published>2017-02-28T01:41:10.000Z</published>
    <updated>2017-02-28T02:35:15.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ios,技巧,tools,js,原理&lt;!--选一个--&gt;" scheme="https://sukeyang.github.io/categories/ios-%E6%8A%80%E5%B7%A7-tools-js-%E5%8E%9F%E7%90%86-%E9%80%89%E4%B8%80%E4%B8%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>AFN实现原理分析(2.x版本)</title>
    <link href="https://sukeyang.github.io/2017/02/27/AFN%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://sukeyang.github.io/2017/02/27/AFN实现原理分析/</id>
    <published>2017-02-27T03:49:29.000Z</published>
    <updated>2017-02-27T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>使用AFHTTPSessionManager进行网络请求,类继承于AFURLSessionManager</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">[manager GET:URL parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> *_Nonnulltask, <span class="keyword">id</span> _NullableresponseObject) &#123;</div><div class="line">  <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">  <span class="comment">//将子线程从网络拉取的数据用于主线程刷新视图</span></div><div class="line">    &#125;);</div><div class="line">  &#125;failure:^(<span class="built_in">NSURLSessionDataTask</span>*_Nullabletask,<span class="built_in">NSError</span>*_Nonnullerror) &#123;</div><div class="line"></div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>通过查看manager方法代码可以看到其实现最终是调用了父类AFURLSessionManager的initWithSessionConfiguration：方法，</p>
<p>设置了默认的json解析方式;</p>
<p>最大的并发操作数为1是让所有请求的发起和等待网络响应均在同一条线程中执行，而不用为每一个请求都新建一条线程，这样节约了很多资源;</p>
<p>默认安全策略是AFSSLPinningModeNone,</p>
<p>该方法代码片段如下</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.sessionConfiguration = configuration;</div><div class="line"><span class="keyword">self</span>.operationQueue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line"><span class="keyword">self</span>.operationQueue.maxConcurrentOperationCount = <span class="number">1</span>;</div><div class="line"><span class="keyword">self</span>.session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:<span class="keyword">self</span>.sessionConfiguration delegate:<span class="keyword">self</span> delegateQueue:<span class="keyword">self</span>.operationQueue];</div><div class="line"><span class="keyword">self</span>.responseSerializer = [AFJSONResponseSerializer serializer];</div></pre></td></tr></table></figure>
<p>在响应到达后会执行AFURLSessionManager的NSURLSessionDataDelegate协议的方法，[AFURLSessioinManager URLSession:dataTask:didReceiveData:]用于查找对应的响应代理，并将后续的数据处理如数据拼接转交给该代理。该方法的实现代码如下：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">AFURLSessionManagerTaskDelegate</span> *delegate = [<span class="keyword">self </span>delegateForTask:dataTask]<span class="comment">;</span></div><div class="line">[delegate URLSession:session dataTask:dataTask didReceiveData:<span class="meta">data</span>]<span class="comment">;</span></div><div class="line"></div><div class="line"><span class="symbol">if</span> (<span class="keyword">self.dataTaskDidReceiveData) </span>&#123;</div><div class="line">    <span class="keyword">self.dataTaskDidReceiveData(session, </span>dataTask, <span class="meta">data</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在数据比较大时，改方法可能会多次执行。</p>
<p>当数据传输完成后会调用[AFURLSessioinManager URLSession:task:didCompleteWithError],该方法用于让对应的代理执行NSURLSessionTaskDelegate协议中的方法，并将该代理对象从字典中移除，源代码如下：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">AFURLSessionManagerTaskDelegate *delegate = [self delegateForTask:<span class="keyword">task</span>];</div><div class="line"></div><div class="line">// delegate may be nil <span class="keyword">when</span> completing a <span class="keyword">task</span> <span class="keyword">in</span> the background</div><div class="line"><span class="keyword">if</span> (delegate) &#123;</div><div class="line">    [delegate URLSession:session <span class="keyword">task</span>:<span class="keyword">task</span> didCompleteWithError:error];</div><div class="line"></div><div class="line">    [self removeDelegateForTask:<span class="keyword">task</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (self.taskDidComplete) &#123;</div><div class="line">    self.taskDidComplete(session, <span class="keyword">task</span>, error);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>随后代理执行URLSession:task:didCompleteWithError:，该方法把数据放到另一个由静态方法生成的url_session_manager_processing_queue操作队列中做数据解析，如json解析，并将解析后的数据回传到主线程或者你自己生成的操作队列里，通过通知中心将请求完成的消息传递到主线程去（后面会写一篇文章介绍通知中心的实现原理,并写一个类似的通知中心）。<br>该方法源码片段如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_async(url_session_manager_processing_queue(), </span>^&#123;</div><div class="line">            NSError *serializationError = nil<span class="comment">;</span></div><div class="line">            responseObject = [manager.responseSerializer responseObjectForResponse:task.response data:[NSData dataWithData:self.mutableData] error:&amp;serializationError]<span class="comment">;</span></div><div class="line"></div><div class="line">            <span class="keyword">dispatch_group_async(manager.completionGroup </span>?: url_session_manager_completion_group(), manager.completionQueue ?: <span class="keyword">dispatch_get_main_queue(), </span>^&#123;</div><div class="line">                if (self.completionHandler) &#123;</div><div class="line">                    self.completionHandler(task.response, responseObject, serializationError)<span class="comment">;</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            <span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">                [[NSNotificationCenter defaultCenter] postNotificationName:AFNetworkingTaskDidCompleteNotification object:task userInfo:userInfo]<span class="comment">;</span></div><div class="line">                &#125;)<span class="comment">;</span></div><div class="line">            &#125;)<span class="comment">;</span></div><div class="line">        &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>通知的作用是decrementActivityCount;</p>
<p>[self.refreshControl endRefreshing];等</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;使用AFHTTPSessionManager进行网络请求,类继承于AFURLSessionManager&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
    
    </summary>
    
      <category term="原理" scheme="https://sukeyang.github.io/categories/%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>YTK实现原理分析</title>
    <link href="https://sukeyang.github.io/2017/02/27/YTK%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://sukeyang.github.io/2017/02/27/YTK实现原理分析/</id>
    <published>2017-02-27T03:48:30.000Z</published>
    <updated>2017-02-27T05:59:52.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="原理" scheme="https://sukeyang.github.io/categories/%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>weex使用介绍</title>
    <link href="https://sukeyang.github.io/2017/02/17/weex%E4%BD%BF%E7%94%A8/"/>
    <id>https://sukeyang.github.io/2017/02/17/weex使用/</id>
    <published>2017-02-17T03:38:28.000Z</published>
    <updated>2017-03-01T09:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>   最近在折腾weex,不过升级到vue2.0出现了一些问题,现在记录使用情况,暂时有一些问题没有解决,官方的链接:<br><a href="https://github.com/alibaba/weex" target="_blank" rel="external">weex官方github</a>   </p>
<p><a href="https://github.com/weexteam/weex-devtool-iOS/blob/master/README-zh.md" target="_blank" rel="external">weex-devtool-iOS</a></p>
<p><a href="https://github.com/weexteam/weex-hackernews/" target="_blank" rel="external">weexteam-demo</a></p>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1.安装环境,nodejs,下面是一些常用的命令.</p>
<p>IDE: Sublime Text + <a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="external">vue-syntax-highlight</a> + HTML-CSS-JS Prettify</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install</div><div class="line">sudo <span class="built_in">npm</span> install -g weex-toolkit@beta</div><div class="line"><span class="built_in">npm</span> run build</div><div class="line"><span class="built_in">npm</span> run copy:ios</div></pre></td></tr></table></figure>
<p>2.开启服务</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> serve</span></div></pre></td></tr></table></figure>
<p>3.开启debug,自动弹出页面</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weex <span class="built_in">debug</span> <span class="comment">--verbose</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   最近在折腾weex,不过升级到vue2.0出现了一些问题,现在记录使用情况,暂时有一些问题没有解决,官方的链接:&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/weex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w
    
    </summary>
    
      <category term="BFE" scheme="https://sukeyang.github.io/categories/BFE/"/>
    
    
  </entry>
  
  <entry>
    <title>js基本用法(三)</title>
    <link href="https://sukeyang.github.io/2017/02/13/xuejs3/"/>
    <id>https://sukeyang.github.io/2017/02/13/xuejs3/</id>
    <published>2017-02-13T09:52:01.000Z</published>
    <updated>2017-02-23T03:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>1.js没有类的概念,只有对象,就是继承也是通过对象的方式;constructor类似于类初始化函数,<br>prototype 是个类的对象;<br>2.保持原型链路的基础上,对父类对象的属性隔离;保证重用;</p>
<pre><code>var F = function(){};
F.prototype = TwoShape.prototype;
Triangle.prototype = new F();
</code></pre><p>3.将uber属性设置成了指向其父级原型的引用;</p>
<pre><code>my.uber = TwoShape.prototype;
</code></pre><p>4.继承函数封装,具体原理不懂;</p>
<pre><code>function extend(Child,Parent) {
var F = function(){};
F.prototype = Parent.prototype;
Child.prototype = new F;
Child.prototype.constructor =  Child;
Child.uber = Parent.prototype;

extend(TwoShape,shape);//使用内容    
</code></pre><p>属性的拷贝为自身的,基本数据类型是创建新的,函数和数组都是值的引用;新创建相当于忘记之前的对象,重新生成一个对象;    </p>
<pre><code>function extend2(Child, Parent) {
var p = Parent.prototype;
var c = Child.prototype;
for (var i in p ){
c[i] = p[i];
c.uber = p; 
    }
}
</code></pre><h3 id="DOM环境"><a href="#DOM环境" class="headerlink" title="DOM环境"></a>DOM环境</h3><p>1.访问标签,计时器,修改样式等</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggle</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> st = inputs[<span class="number">0</span>].style;</div><div class="line">	inputs[<span class="number">0</span>].style.visibility = (st.visibility == <span class="string">"hidden"</span>)?<span class="string">"visible"</span>:<span class="string">"hidden"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myint = setInterval(toggle,<span class="number">1000</span>);</div><div class="line">clearInterval(myint);</div></pre></td></tr></table></figure>
<p>2.创建添加节点</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var myp = document.createElement(<span class="string">"p"</span>)<span class="comment">;</span></div><div class="line">myp.innerHTML = <span class="string">"yet another"</span><span class="comment">;</span></div><div class="line">myp.style.<span class="keyword">border </span>= <span class="string">"2px dotted blue"</span><span class="comment">;</span></div><div class="line">document.<span class="keyword">body.appendChild(myp)</span></div></pre></td></tr></table></figure>
<p>3.插入节点,删除节点</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document<span class="selector-class">.body</span><span class="selector-class">.insertBefore</span>(<span class="selector-tag">p</span>,document<span class="selector-class">.body</span><span class="selector-class">.firstChild</span>)</div><div class="line">document<span class="selector-class">.body</span><span class="selector-class">.removeChild</span>(myp)</div></pre></td></tr></table></figure>
<p>4.其他常用方法</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.title =<span class="string">"123"</span>; <span class="comment">//不改变实际标签内容</span></div><div class="line"><span class="built_in">document</span>.cookie;</div></pre></td></tr></table></figure>
<p>5.捕捉法和冒泡法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;1.js没有类的概念,只有对象,就是继承也是通过对象的方式;constructor类似于类初始化函数,&lt;br&gt;prototype 是个类的对
    
    </summary>
    
      <category term="js" scheme="https://sukeyang.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js基本用法(二)</title>
    <link href="https://sukeyang.github.io/2017/02/10/xuejs2/"/>
    <id>https://sukeyang.github.io/2017/02/10/xuejs2/</id>
    <published>2017-02-10T10:12:03.000Z</published>
    <updated>2017-02-13T10:04:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见类"><a href="#常见类" class="headerlink" title="常见类"></a>常见类</h3><p>1.Boolean 验证类的布尔值</p>
<pre><code>Boolean(&quot;&quot;)  false
Boolean(&quot;123&quot;)  true
</code></pre><p>2.Number任何都转成number,toString加参数转换</p>
<pre><code>var n = Number(&quot;123&quot;)
n.toString(2)  //1111011
</code></pre><p>3.String类对象方法</p>
<pre><code>test.toUpperCase();
test.toLocaleLowerCase()
test.indexOf(&quot;m&quot;,2) //返回某个指定的字符串值在字符串中2出现的位置。找不到为-1 
test.charAt(0)
</code></pre><p>字符串的搜索用下面的方式</p>
<pre><code>if(test.indexOf (&quot;c&quot;) == -1){
alert(&quot;yes&quot;);
}
</code></pre><p>substring()    提取字符串中两个指定的索引号之间的字符。<br>split()    把字符串分割为字符串数组。<br>concat()    连接两个或更多字符串，并返回新的字符串。<br>lastIndexOf()    从后向前搜索字符串。<br>4.math类常用数学常数</p>
<pre><code>Math.random()*100
8*Math.random()+2  //2到10之间的某一个数    
Math.round(Math.random()*10)  //四舍五人
Math.ceil(Math.random()*10)  //取值
Math.floor(Math.random()*10) //舍去
Math.min(1,10) 取最小值
Math.max(1,10) 取最大值
Math.pow(2,4) 指数运算
Math.sqrt(9); 平方根
</code></pre><p>5.Date类相关,不一个new则为当前日期</p>
<pre><code>new Date(2008,0,1)    //月从0开始计算 Tue Jan 01 2008 00:00:00 GMT+0800 (CST)
dateTest.setMonth(2) //设置为3月
dateTest.getMonth() // 2
Date.parse(&quot;Jan 1,2009&quot;) //转为时间戳
ateTest.getDay() //获取星期几 0为每星期的第一天
</code></pre><p>6.正则表达式</p>
<pre><code>var re = new RegExp(&quot;j.*t&quot;,&quot;gmi&quot;);    
</code></pre><p>修饰符    描述,一旦设置不能更改<br>i    执行对大小写不敏感的匹配。默认false<br>g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。默认false<br>m    执行多行匹配 默认false</p>
<pre><code>var s = new String(&quot;HelloJavaScriptWorld&quot;);
s.match(/a/); //匹配字符串
s.search(/j.*a/i); //匹配字符串索引位置
s.replace(/[A-Z]/g,&apos;&apos;); //替换为空字符串
</code></pre><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。()为分组匹配分组的第一组;这些函数还可以匹配普通字符串;</p>
<pre><code>var email = &quot;stoyan@phpied.com&quot;;
var username= email.replace(/(.*)@.*/,&quot;$1&quot;);

var callback = function(){ 
glob = arguments;
return arguments[1] +&quot; at&quot; + arguments[2] + &quot; dot &quot; + arguments[3];
}
&quot;stoyan@phpied.com&quot;.replace(/(.*)@(.*)\.(.*)/, callback); //分组
&quot;stoyan atphpied dot com&quot; 

var csv = &quot;one, two, three, four&quot;;
csv.split(/\s*,\s*/); //空格匹配;
</code></pre><p>7.error错误捕捉,,自定义错误对象,</p>
<pre><code>try {
idont();
} catch (e) {
alert(e.name + &apos;: &apos; + e.message);
}    

try {
var total = mybeE();
if(total === 0) {
throw new Error(&quot;division by zero&quot;);
} else {
alert(50/total);
}
} catch (e){
alert(e.name + &apos;: &apos; + e.message);
}
</code></pre><h3 id="重要的属性-原型"><a href="#重要的属性-原型" class="headerlink" title="重要的属性-原型"></a>重要的属性-原型</h3><p>1.原型类似于父类的东西,gadget的父类gadget.prototype,可以增加属性,可以修改原型,然后影响原来的对象</p>
<pre><code>function gadget (name ,color) {
this.name = name;
this.color = color;
this.whatAreYou = function () {
return &quot;i am a &quot; + this.color + &quot; &quot; +this.name;
}
}            

gadget.prototype = {
price : 100,
rating: 3,
getInfo :function() {
return &quot;rating&quot; + this.rating + &quot;  price&quot; + this.price;
}
}
</code></pre><p>2.对象自身属性没有找到指定的属性,会去原型里面继续查找,如果相同,以对象的属性为准;打印属性;</p>
<pre><code>for (var prop in newToy) {
 console.log(prop + &quot; = &quot; + newToy[prop]);
</code></pre><p>newToy.hasOwnProperty属于自身的属性</p>
<pre><code> for (var prop in newToy) {
if(newToy.hasOwnProperty(prop)){
console.log(prop + &quot; = &quot; + newToy[prop]);
}}    
</code></pre><p>newToy.propertyIsEnumerable自身属性为true,原型中的为false;<br>monke是对象george的原型;</p>
<pre><code>monkey.isPrototypeOf(george);
</code></pre><p>3.prototype和<em>proto</em>属性不是等价的,prototype改变并不会影响到<em>proto</em></p>
<pre><code>monkey.test = 1;
developer.test; //修改monkey的属性,修改developer内容;
</code></pre><p>4.扩展内建函数常用Array,相当于iOS分类</p>
<pre><code>Array.prototype.inArray = function (needle) {
for (var i = 0,len = this.length;i&lt; len;i++){
if (this[i] === needle) {
return true;
}
}
}    
</code></pre><p>5.判断函数是否可以使用,如果想添加一个属性或者方法最好看是不是已经存在其中;</p>
<pre><code>if (!String.prototype.reverse) {
alert(&quot;1111&quot;);
}
</code></pre><p>6.当我们重写某对象的prototype时候,重置相应的constructor是一个好习惯;        </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常见类&quot;&gt;&lt;a href=&quot;#常见类&quot; class=&quot;headerlink&quot; title=&quot;常见类&quot;&gt;&lt;/a&gt;常见类&lt;/h3&gt;&lt;p&gt;1.Boolean 验证类的布尔值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Boolean(&amp;quot;&amp;quot;)  false
Bool
    
    </summary>
    
      <category term="js" scheme="https://sukeyang.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js基本用法(一)</title>
    <link href="https://sukeyang.github.io/2017/02/10/xuejs1/"/>
    <id>https://sukeyang.github.io/2017/02/10/xuejs1/</id>
    <published>2017-02-10T10:12:00.000Z</published>
    <updated>2017-02-13T01:02:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>1.不用new的话,this会变成全局变量</p>
<pre><code>function Hero(name) { this.name = name ;};
var h1 = Hero(&quot;ceshi&quot;);
</code></pre><p>2.大小写严格<br>3.Infinity 超出处理范围的数值 1e309,<br>4.NaN依旧是number,typeof NaN可以查看,特殊数字<br>5.数字字符串做运算,会当成数字类型使用,转换失败就是NaN,偷懒做法是1*s转换成数字,</p>
<pre><code>var s = &quot;1&quot;;s = 3*s
var s = &quot;100&quot;;s = 1*s
var s = &quot;1avbc&quot;;s = 3*s
</code></pre><p>加法不适用</p>
<pre><code>var s = &quot;1&quot;;s += 3    
</code></pre><p>6.加法是用来把数字转成字符串,取巧的方式</p>
<pre><code>var s = &quot;1&quot;;s += 3    
</code></pre><p>7.空字符串””,null,undefined,0,NaN,false都是false<br>8.===等价运算</p>
<pre><code>1 === &apos;1&apos;    false
</code></pre><p>!== 不能价运算     </p>
<pre><code>NaN == NaN  false
</code></pre><p>9.undefined为不存在或者未经过赋值的变量,和nul在转换基本类型时有区别</p>
<pre><code>&quot;&quot; + null        &quot;null&quot;
&quot;&quot; + undefined   undefined
</code></pre><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>1.数组操作</p>
<pre><code>delete a[1]    
length属性为太长自动填充    undefined
a.push(&quot;last&quot;)     //添加到最后
  a.pop()   //删掉最后
  a.sort()  //排序
  a.join(&quot;is &quot;)  //连接&quot;1is is is &quot;
  a.slice(1,2)  //查看
  a.splice(1,2,100,200,300) //删掉并添加新的[1, 100, 200, 300, undefined × 1]
</code></pre><p>2.判断数组存在</p>
<pre><code>if(typeof somevar == &quot;undefined&quot;) {result = &quot;yes&quot;};
&quot;yes&quot;    
</code></pre><p>3.常用函数parseInt() 默认十进制,看后面参数的开头”0x”,”0337”应该避免为8进制<!--并未在google浏览器下出现错误--></p>
<pre><code>parseInt(&quot;123abc&quot;) 123
parseInt(&quot;FF&quot;,16)  255
parseInt(&quot;0x34&quot;)
</code></pre><p>4.isNaN函数其实等同于回答了这样一个问题：这个值被强制转换成数值时会不会返回IEEE-754​中所谓的”不是数值“（not a number）。</p>
<pre><code>isNaN({}); // true    
isNaN(&quot;37&quot;);      // false: 可以被转换成数值37
</code></pre><p>5.你可以用这个方法来判定一个数字是否是有限数字。isFinite 方法检测它参数的数值。如果参数是 NaN，正无穷大或者负无穷大，会返回false，其他返回 true。</p>
<pre><code>isFinite(2e64);      // true
isFinite(Infinity);  // false
</code></pre><p>6.encodeURI() 是对统一资源标识符（URI）进行编码的方法。它使用1到4个转义序列来表示每个字符的UTF-8编码<br>encodeURIComponent()是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。</p>
<pre><code>encodeURI()
encodeURIComponent()
</code></pre><p>7.eval(string) 一个字符串表示了一个JavaScript表达式，声明， 或声明的序列。表达式可以包括变量和已存在对象的属性。</p>
<pre><code>eval(string)
</code></pre><p>8.总是使用var 来声明全局变量<br>9.f()执行之后,n()为全局变量,或者返回给全局空间声明,保留了作用域内参数b的值,记录自身在的环境和相关的参数.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">var</span> n;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">var</span>  b  = <span class="string">"b"</span>;</div><div class="line">	n = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> b;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>留住的是指针,用get,set函数闭包建立私有变量,迭代器.</p>
<h3 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h3><p>1.属性名字一般不加引号,除非:为js保留字,含有特殊字符,用数字开头的属性<br>2.属性可以是函数,函数是一种数据类型.<br>3.属性不能用.进行调用和(1)条件一致<br>4.this标识当前对象.<br>5.不用new 生成对象 this引用的是window全局对象.<br>6.对象有一个constructor 构造器属性<br>7.h12 instanceof Hero 是否有某一个对象初始化来的<br>8.控制输出数据的内容,函数也是对象也是一种数据类型</p>
<pre><code>console.info(h12)
console.log() 
console.error()
</code></pre><p>9.一些方法,o会自动调用toString</p>
<pre><code>toString
&quot;an object&quot; + o    
</code></pre><p>10.valueOf()返回对象本身.</p>
<pre><code>o.valueOf() === o    
</code></pre><p>11.尽量避免使用Function 构造器函数,权限太大</p>
<pre><code>var sum = new Function(&quot;a,b&quot;,&quot;return a + b&quot;)     sum.length //参数个数 2
</code></pre><p>12.caller返回调用函数</p>
<pre><code>function A(){return A.caller;}
function B(){return A();}
</code></pre><p>13.prototype为构造函数的内容,该属性为一个对象</p>
<pre><code>prototype        
</code></pre><p>14.some_obj.say.call(my_obj,’myobje’)为让my_obj 执行say 函数,并且传入参数.本质是修改了this的值,<br>some_obj.say.apply(my_obj,[‘ceshi’])为apply 参数为一个数组形式的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> some_obj = &#123;</div><div class="line">	name:<span class="string">'nanne'</span>,</div><div class="line">	say:<span class="function"><span class="keyword">function</span><span class="params">(who)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">'haya '</span> + who + <span class="string">', i am a '</span> +<span class="keyword">this</span>.name;	</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">some_obj.say.apply(my_obj,[<span class="string">'ceshi'</span>])</div></pre></td></tr></table></figure></p>
<p>15.arguments.callee属性为当前的函数对象,arguments数组,没有sort和slice方法</p>
<pre><code>    (
function (count) {
    if(count &lt; 5){
    alert(count);
    arguments.callee(++count);    
}
}
)(1)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;1.不用new的话,this会变成全局变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Hero(name) { thi
    
    </summary>
    
      <category term="js" scheme="https://sukeyang.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>2016总结</title>
    <link href="https://sukeyang.github.io/2017/02/06/2016%E6%80%BB%E7%BB%93/"/>
    <id>https://sukeyang.github.io/2017/02/06/2016总结/</id>
    <published>2017-02-06T04:00:58.000Z</published>
    <updated>2017-02-28T01:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>减肥5kg,少吃肉类,鱼类<br>看电影5次 电影院<br>看书5本 包括js 还有es6,微信小程序等内容<br>微信个人公众号<br><a id="more"></a><br>后台开发初识<br>出去旅游3次,包括北京周边<br>开通自己的博客或者简书写博客10篇内容<br>听书 鬼吹灯全集 不算书</p>
<h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>keynote 的制作等<br>做分享 3次 ,<br>工资提升<br>提升用户到2k 活跃到2w 更新内容,10次,每月都的多100人.<br>页面的优化</p>
<p>已经完成<br>20170226 骑车ofo到圆明园,一次游玩<br>201702025 看完<javascript面向对象编程指南></javascript面向对象编程指南></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生活上&quot;&gt;&lt;a href=&quot;#生活上&quot; class=&quot;headerlink&quot; title=&quot;生活上&quot;&gt;&lt;/a&gt;生活上&lt;/h2&gt;&lt;p&gt;减肥5kg,少吃肉类,鱼类&lt;br&gt;看电影5次 电影院&lt;br&gt;看书5本 包括js 还有es6,微信小程序等内容&lt;br&gt;微信个人公众号&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="https://sukeyang.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Sublime Text 进行Markdown 编辑</title>
    <link href="https://sukeyang.github.io/2016/12/18/%E4%BD%BF%E7%94%A8SublimeText%E8%BF%9B%E8%A1%8CMarkdown%E7%BC%96%E8%BE%91/"/>
    <id>https://sukeyang.github.io/2016/12/18/使用SublimeText进行Markdown编辑/</id>
    <published>2016-12-18T07:36:25.000Z</published>
    <updated>2017-02-21T01:50:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装包管理器"><a href="#安装包管理器" class="headerlink" title="安装包管理器"></a>安装包管理器</h2><p>同时按下ctrl+”`”,将会在窗口底部出现一个小控制台，下面代码粘贴到控制台的编辑栏里：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="built_in">open</span>(os.path.join(ipp, pf), <span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</div></pre></td></tr></table></figure>
<p>安装不上的问题，<a href="https://packagecontrol.io/installation" target="_blank" rel="external">看官方办法</a></p>
<h2 id="安装我们要用到的插件"><a href="#安装我们要用到的插件" class="headerlink" title="安装我们要用到的插件"></a>安装我们要用到的插件</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Markdown </span>Editing // <span class="keyword">Markdown编辑和语法高亮支持 </span></div><div class="line"><span class="keyword">Markdown </span>Preview// <span class="keyword">Markdown导出html预览支持</span></div></pre></td></tr></table></figure>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>1.在设置里面Sublime Text – &gt;preference–&gt; key bunding user     输入</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="attr">"keys"</span>: [<span class="string">"alt+r"</span>], <span class="attr">"command"</span>: <span class="string">"markdown_preview"</span>, <span class="attr">"args"</span>: &#123; <span class="attr">"target"</span>: <span class="string">"browser"</span>&#125;&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>然后按住alt + r ，预览你编辑的文件吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装包管理器&quot;&gt;&lt;a href=&quot;#安装包管理器&quot; class=&quot;headerlink&quot; title=&quot;安装包管理器&quot;&gt;&lt;/a&gt;安装包管理器&lt;/h2&gt;&lt;p&gt;同时按下ctrl+”`”,将会在窗口底部出现一个小控制台，下面代码粘贴到控制台的编辑栏里：&lt;/p&gt;
&lt;fig
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>ReactNative错误收集问题</title>
    <link href="https://sukeyang.github.io/2016/12/15/ReactNative%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86%E9%97%AE%E9%A2%98/"/>
    <id>https://sukeyang.github.io/2016/12/15/ReactNative错误收集问题/</id>
    <published>2016-12-15T02:47:26.000Z</published>
    <updated>2017-02-17T03:58:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>##错误一:Unable to resolve module image!<br>方法:    在 Xcode 下 Images.xcassets 里面明确的有这个图片。</p>
<p>##错误二:低版本兼容,Log类接口修改, 添加 RCTLogSource source 即可.</p>
<pre><code>RCTSetLogFunction(^(RCTLogLevel level, RCTLogSource source, NSString *fileName, NSNumber *lineNumber, NSString *message)
</code></pre><p>##错误三:RCTSRWebSocket.m报错,代码在下面</p>
<pre><code>SecRandomCopyBytes(kSecRandomDefault, sizeof(uint32_t), (uint8_t *)mask_key);
</code></pre><p>修改为:</p>
<pre><code>(void)SecRandomCopyBytes(kSecRandomDefault, sizeof(uint32_t), (uint8_t *)mask_key);    
</code></pre><p>##错误四: Seem you’re trying to access ‘ReactNative.createClass’ from the ‘react-native package;</p>
<pre><code>var React = require(&apos;react&apos;);
var component = React.createClass();
</code></pre><p>RN升级导致的问题,官方<a href="http://bbs.reactnative.cn/topic/1857/seems-you-re-trying-to-access-reactnative-createclass/7" target="_blank" rel="external">解决</a></p>
<p>##错误五:重新安装sdk,react@15.3.1是sdk版本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">watchman watch-del-all</div><div class="line">rm -rf node_modules</div><div class="line">npm <span class="keyword">install</span> react@<span class="number">15.3</span><span class="number">.1</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span></div><div class="line">rm -fr $TMPDIR/react-*</div><div class="line">npm <span class="keyword">start</span> <span class="comment">-- --reset-cache	</span></div><div class="line"><span class="string">``</span><span class="string">`		</span></div><div class="line">##错误六:错误是下面提示</div><div class="line">方法:other flag 添加标识 -lc++</div></pre></td></tr></table></figure>
<p>Undefined symbols for architecture x86_64:<br>  “std::<strong>1::</strong>next_prime(unsigned long)”, referenced from:<br>      std::<strong>1::</strong>hash_table<std::__1::__hash_value_type<unsigned long,="" unsigned="" long="">, std::<strong>1::</strong>unordered_map_hasher<unsigned long,="" std::__1::__hash_value_type<unsigned="" unsigned="" long="">, std::<strong>1::hash<unsigned long="">, true&gt;, std::</unsigned></strong>1::<strong>unordered_map_equal&lt;unsigned long, std::</strong>1::<strong>hash_value_type<unsigned long,="" unsigned="" long="">, std::</unsigned></strong>1::equal_to<unsigned long="">, true&gt;, std::<strong>1::allocator&lt;std::</strong>1::<strong>hash_value_type<unsigned long,="" unsigned="" long=""> &gt; &gt;::rehash(unsigned long) in libReact.a(RCTJSCExecutor.o)<br>  “std::</unsigned></strong>1::mutex::lock()”, referenced from:<br>      -[RCTModuleData setUpInstanceAndBridge] in libReact.a(RCTModuleData.o)<br>  “std::<strong>1::mutex::unlock()”, referenced from:<br>      -[RCTModuleData setUpInstanceAndBridge] in libReact.a(RCTModuleData.o)<br>  “std::</strong>1::mutex::~mutex()”, referenced from:<br>      -[RCTModuleData .cxx_destruct] in libReact.a(RCTModuleData.o)<br>  “std::terminate()”, referenced from:<br>      <strong>_clang_call_terminate in libReact.a(RCTJSCExecutor.o)<br>  “operator delete<a href="void*"></a>“, referenced from:<br>      -[RCTJSCExecutor dealloc] in libReact.a(RCTJSCExecutor.o)<br>      executeRandomAccessModule(RCTJSCExecutor*, unsigned int, unsigned long, unsigned long) in libReact.a(RCTJSCExecutor.o)<br>      readRAMBundle(std::</strong>1::unique_ptr<__sfile, int="" (*)(__sfile*)="">, RandomAccessBundleData&amp;) in libReact.a(RCTJSCExecutor.o)<br>…..<br>…..<br>  “<strong>_cxa_begin<em>catch”, referenced from:
      </em></strong>clang_call_terminate in libReact.a(RCTJSCExecutor.o)<br>  “___gxx_personality_v0”, referenced from:<br>      -[RCTJavaScriptContext initWithJSContext:onThread:] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJavaScriptContext init] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJavaScriptContext invalidate] in libReact.a(RCTJSCExecutor.o)<br>      +[RCTJSCExecutor runRunLoopThread] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJSCExecutor setBridge:] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJSCExecutor init] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJSCExecutor initWithUseCustomJSCLibrary:] in libReact.a(RCTJSCExecutor.o)<br>      …<br>ld: symbol(s) not found for architecture x86_64<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)<br>```</__sfile,></unsigned></unsigned></std::__1::__hash_value_type<unsigned></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##错误一:Unable to resolve module image!&lt;br&gt;方法:    在 Xcode 下 Images.xcassets 里面明确的有这个图片。&lt;/p&gt;
&lt;p&gt;##错误二:低版本兼容,Log类接口修改, 添加 RCTLogSource source
    
    </summary>
    
      <category term="BFE" scheme="https://sukeyang.github.io/categories/BFE/"/>
    
    
  </entry>
  
  <entry>
    <title>创建自己Carthage支持的库(二)</title>
    <link href="https://sukeyang.github.io/2016/12/01/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1Carthage%E6%94%AF%E6%8C%81%E7%9A%84%E5%BA%93/"/>
    <id>https://sukeyang.github.io/2016/12/01/创建自己Carthage支持的库/</id>
    <published>2016-12-01T09:34:32.000Z</published>
    <updated>2017-02-27T09:41:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建自己Carthage支持的库"><a href="#创建自己Carthage支持的库" class="headerlink" title="创建自己Carthage支持的库"></a>创建自己Carthage支持的库</h2><h3 id="首先创建一个framework"><a href="#首先创建一个framework" class="headerlink" title="首先创建一个framework"></a>首先创建一个framework</h3><p>1.选择你的工程</p>
<p>2.选择framework所在的Target</p>
<p>3.选择Build Phases</p>
<p>4.点击Header左下角的+号把你要暴露的头文件添加到Public里面（默认添加到Project里面，用鼠标把它拽过去）</p>
<p>5.在Compile source里面添加实现的.m文件</p>
<h3 id="在framework的BuildSettings的Packaging里面-把Produce-Module-Name-和-Produce-Name改成想要的名字XXXX"><a href="#在framework的BuildSettings的Packaging里面-把Produce-Module-Name-和-Produce-Name改成想要的名字XXXX" class="headerlink" title="在framework的BuildSettings的Packaging里面,把Produce Module Name 和 Produce Name改成想要的名字XXXX"></a>在framework的BuildSettings的Packaging里面,把Produce Module Name 和 Produce Name改成想要的名字XXXX</h3><p>1.如果你使用了类别,那么你需要在Build Settings的Linking的Other Linker Flags里加上-all_load</p>
<p>2.如果你想你的工程支持bitcode,需要在Other C Flags 里加上-fembed-bitcode</p>
<p>3.选择 Manager Schemes,勾上shared(这样Carthage就可以编译你的工程)</p>
<p>4.cd到项目文件夹,运行</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> carthage build --<span class="keyword">no</span>-skip-current</div></pre></td></tr></table></figure>
<p>命令运行完成后,你会发现你的项目文件夹里面多了一个Carthage文件夹<code>Carthage-&gt;Build-&gt;iOS-&gt;xxxx.framework!</code></p>
<h3 id="要给别人使用的话你还需要最后一步-给你的工程打上tag-push上去"><a href="#要给别人使用的话你还需要最后一步-给你的工程打上tag-push上去" class="headerlink" title="要给别人使用的话你还需要最后一步,给你的工程打上tag,push上去"></a>要给别人使用的话你还需要最后一步,给你的工程打上tag,push上去</h3><p>在Cartfile文件添加,</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">github</span> <span class="string">"yourname/xxxx"</span> <span class="string">"master"</span></div></pre></td></tr></table></figure>
<p>然后运行下面代码更新,frmework</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">carthage update</span></div></pre></td></tr></table></figure>
<h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a><code>参考连接</code></h2><p>创建自己的<a href="http://blog.csdn.net/ruglcc/article/details/53725251" target="_blank" rel="external">Cartfile支持的库</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建自己Carthage支持的库&quot;&gt;&lt;a href=&quot;#创建自己Carthage支持的库&quot; class=&quot;headerlink&quot; title=&quot;创建自己Carthage支持的库&quot;&gt;&lt;/a&gt;创建自己Carthage支持的库&lt;/h2&gt;&lt;h3 id=&quot;首先创建一个fra
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Carthage安装及使用(一)</title>
    <link href="https://sukeyang.github.io/2016/12/01/Carthage%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://sukeyang.github.io/2016/12/01/Carthage安装及使用/</id>
    <published>2016-12-01T06:58:29.000Z</published>
    <updated>2017-02-27T09:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Carthage 使用于 Swift 语言编写，只支持动态框架，只支持 iOS8+的Cocoa依赖管理工具。是一个去中心化的Cocoa依赖管理工具;<br>CocoaPods对原有工程破坏性大(建立workspace,增加一堆乱七八糟的文件),侵入性太强,耦合太高;</p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>检查ruby和brew版本</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">ruby</span> -v</div><div class="line"><span class="keyword">brew </span>-v</div></pre></td></tr></table></figure>
<p>如果电脑中没有Homebrew,终端执行脚本安装即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<p>方法1:更新brew,安装carthage</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span>update</div><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>carthage</div></pre></td></tr></table></figure>
<p>方法2:下载安装<a href="https://github.com/Carthage/Carthage/releases" target="_blank" rel="external">Carthage.pkg</a></p>
<h2 id="常见命令使用"><a href="#常见命令使用" class="headerlink" title="常见命令使用"></a>常见命令使用</h2><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">carthage <span class="keyword">version</span></div><div class="line">brew upgrade carthage  <span class="comment">//升级</span></div><div class="line">sudo brew uninstall carthage  <span class="comment">//卸载</span></div></pre></td></tr></table></figure>
<p>创建空的Cartfile文件</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">touch Cartfile</span></div></pre></td></tr></table></figure>
<p>打开Cartfile添加三方库信息,如</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github <span class="string">"Alamofire/Alamofire"</span><span class="function"> ~&gt;</span> <span class="number">3.0</span></div></pre></td></tr></table></figure>
<p>保存并关闭Cartfile文件并执行,<code>--platform iOS</code> 只是iOS平台</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">carthage <span class="keyword">update</span> <span class="comment">--platform iOS</span></div></pre></td></tr></table></figure>
<p>引入设置Xcode自动搜索Framework的目录,Target—&gt;Build Setting—&gt;Framework Search Path—&gt;添加路径下面</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">＂$(SRCROOT)<span class="regexp">/Carthage/</span>Build<span class="regexp">/iOS＂</span></div></pre></td></tr></table></figure>
<h3 id="1-Cartfile-resolved-需要提交到-Git"><a href="#1-Cartfile-resolved-需要提交到-Git" class="headerlink" title="1.Cartfile.resolved (需要提交到 Git)"></a>1.Cartfile.resolved (需要提交到 Git)</h3><p>在执行 carthage update 命令后会在根目录创建一个 Cartfile.resolved 文件，这个文件是生成后的依赖关系，不能修改。</p>
<p>Cartfile.resolved 文件确保提交的项目可以使用完全相同的配置与方式运行启用。 跟踪项目当前所用的依赖版本号，保持多端开发一致,出于这个原因,强烈建议提交这个文件到版本控制中</p>
<h3 id="2-自动生成的Carthage目录-不需要提交到-Git"><a href="#2-自动生成的Carthage目录-不需要提交到-Git" class="headerlink" title="2.自动生成的Carthage目录 (不需要提交到 Git)"></a>2.自动生成的Carthage目录 (不需要提交到 Git)</h3><p>Carthage文件夹用来存放:</p>
<p>carthage checkout 从git拉取的依赖库源文件(Checkouts)</p>
<p>carthage build编译后的文件(Build),包含Mac 与 iOS对应的.framework,文件夹用来存放依赖库的源文件和编译后的文件(不需要提交到 Git，可以修改.gitignore文件，增加忽略 Carthage 文件夹就行了：#Carthage Carthage）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Carthage 使用于 Swift 语言编写，只支持动态框架，只支持 iOS8+的Cocoa依赖管理工具。是一个去中心化的Cocoa依赖管
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>tableviewcell左对齐</title>
    <link href="https://sukeyang.github.io/2016/11/24/tableviewcell%E5%B7%A6%E5%AF%B9%E9%BD%90/"/>
    <id>https://sukeyang.github.io/2016/11/24/tableviewcell左对齐/</id>
    <published>2016-11-24T02:47:54.000Z</published>
    <updated>2017-02-24T03:03:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.解决tableview separatorInset cell分割线左对齐</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">tableView</span><span class="selector-pseudo">:(UITableView</span> *)<span class="selector-tag">tableView</span> <span class="selector-tag">willDisplayCell</span><span class="selector-pseudo">:(UITableViewCell</span> *)<span class="selector-tag">cell</span> <span class="selector-tag">forRowAtIndexPath</span><span class="selector-pseudo">:(NSIndexPath</span> *)<span class="selector-tag">indexPath</span> &#123;</div><div class="line">    <span class="comment">// Remove seperator inset</span></div><div class="line">    <span class="selector-tag">if</span> ([cell <span class="attribute">respondsToSelector</span>:<span class="variable">@selector</span>(<span class="attribute">setSeparatorInset</span>:)]) &#123;</div><div class="line">        <span class="selector-attr">[cell setSeparatorInset:UIEdgeInsetsZero]</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Prevent the cell from inheriting the Table View's margin settings</span></div><div class="line">    <span class="selector-tag">if</span> ([cell <span class="attribute">respondsToSelector</span>:<span class="variable">@selector</span>(<span class="attribute">setPreservesSuperviewLayoutMargins</span>:)]) &#123;</div><div class="line">        <span class="selector-attr">[cell setPreservesSuperviewLayoutMargins:NO]</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Explictly set your cell's layout margins</span></div><div class="line">    <span class="selector-tag">if</span> ([cell <span class="attribute">respondsToSelector</span>:<span class="variable">@selector</span>(<span class="attribute">setLayoutMargins</span>:)]) &#123;</div><div class="line">        <span class="selector-attr">[cell setLayoutMargins:UIEdgeInsetsZero]</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>解释说明:</code><br>iOS7，想要设置cell的分割线显示到最左端，只需要设置separatorInset的值为UIEdgeInsetsZero。</p>
<p>iOS8，简单设置separatorInset的值为UIEdgeInsetsZero的方法已经无效了。UIView的layoutMargins 默认为{8, 8, 8, 8}。</p>
<p>cell的preservesSuperviewLayoutMargins默认为true时，可能会导致cell被其父UITableView的LayoutMargin影响。如果设置为false时，cell不被UITableView的LayoutMargin影响。</p>
<p>2.全局设置方法(iOS7 8 9 通用)</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[[UITableView appearance]</span> <span class="selector-tag">setSeparatorStyle</span><span class="selector-pseudo">:UITableViewCellSeparatorStyleSingleLine</span>];</div><div class="line"></div><div class="line"><span class="selector-attr">[[UITableView appearance]</span> <span class="selector-tag">setSeparatorInset</span><span class="selector-pseudo">:UIEdgeInsetsZero</span>];</div><div class="line"></div><div class="line"><span class="selector-attr">[[UITableViewCell appearance]</span> <span class="selector-tag">setSeparatorInset</span><span class="selector-pseudo">:UIEdgeInsetsZero</span>];</div><div class="line"></div><div class="line"><span class="selector-tag">if</span> ([UITableView <span class="attribute">instancesRespondToSelector</span>:<span class="variable">@selector</span>(<span class="attribute">setLayoutMargins</span>:)]) &#123;</div><div class="line"></div><div class="line"><span class="selector-attr">[[UITableView appearance]</span> <span class="selector-tag">setLayoutMargins</span><span class="selector-pseudo">:UIEdgeInsetsZero</span>];</div><div class="line"></div><div class="line"><span class="selector-attr">[[UITableViewCell appearance]</span> <span class="selector-tag">setLayoutMargins</span><span class="selector-pseudo">:UIEdgeInsetsZero</span>];</div><div class="line"></div><div class="line"><span class="selector-attr">[[UITableViewCell appearance]</span> <span class="selector-tag">setPreservesSuperviewLayoutMargins</span><span class="selector-pseudo">:NO</span>];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考链接:</p>
<p>1.<a href="http://stackoverflow.com/questions/25770119/ios-8-uitableview-separator-inset-0-not-working?page=1&amp;tab=active#tab-top" target="_blank" rel="external">stackoverflow</a></p>
<p>2.<a href="http://www.cnblogs.com/Zev_Fung/p/5650922.html" target="_blank" rel="external">http://www.cnblogs.com/Zev_Fung/p/5650922.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.解决tableview separatorInset cell分割线左对齐&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;d
    
    </summary>
    
      <category term="ios" scheme="https://sukeyang.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 9 - Keyboard 出现在 UIAlertView 不消失</title>
    <link href="https://sukeyang.github.io/2016/10/01/UIAlertView%E4%B8%8D%E6%B6%88%E5%A4%B1/"/>
    <id>https://sukeyang.github.io/2016/10/01/UIAlertView不消失/</id>
    <published>2016-10-01T09:56:13.000Z</published>
    <updated>2017-02-20T01:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>今天遇见一个奇怪的bug,当我的UIAlertView 消失的时候键盘弹出来了,这个只出现在第一次安装的时候<br>万能的<a href="http://stackoverflow.com/questions/32744209/ios-9-keyboard-pops-up-after-uialertview-dismissed" target="_blank" rel="external">stackoverflow</a>上面有这个问题的一些解决方案:</strong></p>
<p>1.使用新的api,UIAlertController</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UIAlertController *alertController = [UIAlertController <span class="string">alertControllerWithTitle:</span>@<span class="string">"Alert Title!"</span> <span class="string">message:</span>@<span class="string">"This is an alert message."</span> <span class="string">preferredStyle:</span>UIAlertControllerStyleAlert]; </div><div class="line">UIAlertAction *ok = [UIAlertAction <span class="string">actionWithTitle:</span>@<span class="string">"OK"</span> <span class="string">style:</span>UIAlertActionStyleDefault <span class="string">handler:</span>nil]; </div><div class="line">[alertController <span class="string">addAction:</span>ok];</div><div class="line">[self <span class="string">presentViewController:</span>alertController <span class="string">animated:</span>NO <span class="string">completion:</span>nil];</div></pre></td></tr></table></figure>
<p>2.另外一个方法就是延迟调用一下alertView.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@weakify</span>(self);</div><div class="line"><span class="selector-tag">dispatch_after</span>(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.6</span> *NSEC_PER_SEC)),dispatch_get_main_queue(), ^&#123;</div><div class="line">	<span class="variable">@strongify</span>(self);</div><div class="line">	<span class="selector-attr">[self loadUpdateAPI]</span>; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>3.另外一种注销键盘</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] sendAction:<span class="keyword">@selector</span>(resignFirstResponder) to:<span class="literal">nil</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p><strong> 出现的原因</strong><br>可能是键盘状态没有完全被收回,导致出现的</p>
<p><strong>如果有更好的方案可以告诉我</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;今天遇见一个奇怪的bug,当我的UIAlertView 消失的时候键盘弹出来了,这个只出现在第一次安装的时候&lt;br&gt;万能的&lt;a href=&quot;http://stackoverflow.com/questions/32744209/ios-9-keyboard-
    
    </summary>
    
      <category term="ios" scheme="https://sukeyang.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Xcode中Link Binary With Libraries Status Required or Optional</title>
    <link href="https://sukeyang.github.io/2016/09/06/Link%20Binary%20With/"/>
    <id>https://sukeyang.github.io/2016/09/06/Link Binary With/</id>
    <published>2016-09-06T04:00:58.000Z</published>
    <updated>2017-02-17T03:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional"><a href="#Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional" class="headerlink" title="Xcode中Link Binary With Libraries Status Required or Optional"></a>Xcode中Link Binary With Libraries Status Required or Optional</h2><p>Libraries and frameworks are designated as Required by default, but you can change this designation to Optional. Required libraries must be present on the host computer for the product to load. Optional libraries do not have to be present for the product to load. A Required framework will always be loaded into memory, but an Optional framework will be loaded only if needed. The initial load of the application will be faster if a large library that is never needed is designated as Optional.<br><a id="more"></a></p>
<h5 id="内容-在指定设备上根据系统版本选择加载framework-状态-否则会出现崩溃-常见-需要-Optional-否则会在低版本系统ios7下崩溃"><a href="#内容-在指定设备上根据系统版本选择加载framework-状态-否则会出现崩溃-常见-需要-Optional-否则会在低版本系统ios7下崩溃" class="headerlink" title="内容:在指定设备上根据系统版本选择加载framework 状态,否则会出现崩溃.常见 需要 Optional,否则会在低版本系统ios7下崩溃."></a>内容:在指定设备上根据系统版本选择加载framework 状态,否则会出现崩溃.常见 <notficationcenter.framework>需要 Optional,否则会在低版本系统ios7下崩溃.</notficationcenter.framework></h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional&quot;&gt;&lt;a href=&quot;#Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional&quot; class=&quot;headerlink&quot; title=&quot;Xcode中Link Binary With Libraries Status Required or Optional&quot;&gt;&lt;/a&gt;Xcode中Link Binary With Libraries Status Required or Optional&lt;/h2&gt;&lt;p&gt;Libraries and frameworks are designated as Required by default, but you can change this designation to Optional. Required libraries must be present on the host computer for the product to load. Optional libraries do not have to be present for the product to load. A Required framework will always be loaded into memory, but an Optional framework will be loaded only if needed. The initial load of the application will be faster if a large library that is never needed is designated as Optional.&lt;br&gt;
    
    </summary>
    
      <category term="ios" scheme="https://sukeyang.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Cocopod工作原理分析</title>
    <link href="https://sukeyang.github.io/2016/08/27/cocopod%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://sukeyang.github.io/2016/08/27/cocopod工作原理分析/</id>
    <published>2016-08-27T05:58:30.000Z</published>
    <updated>2017-02-27T06:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cocoapods-的工作流程"><a href="#Cocoapods-的工作流程" class="headerlink" title="Cocoapods 的工作流程"></a>Cocoapods 的工作流程</h2><h4 id="pod-install-执行流程可分为如下五个步骤"><a href="#pod-install-执行流程可分为如下五个步骤" class="headerlink" title="pod install 执行流程可分为如下五个步骤:"></a>pod install 执行流程可分为如下五个步骤:</h4><p>1.查看 ~/.cocoapods/repo/master/Specs 是否存在;</p>
<p>2.存在，从这个本地三方库信息库中获取 Podfile 中对应三方库的 git 地址;</p>
<p>3.不存在，输出 Setting up CocoaPods Master repo，并拉取三方库信息库到 ~/.cocoapods/repo/中.<a href="https://github.com/cocoapods/Specs" target="_blank" rel="external">Master repo地址</a>;</p>
<p>4.使用 git 命令从 GitHub 上拉取 Podfile 中对应的三方库源码;</p>
<p>cd 进了 Alamofire 文件夹,里面都是release 版本号,当我们使用 pod search Alamofire 命令时会将这里的所有版本号输出出来。到最新版本号里面是一个 Alamofire.podspec.json 文件,可以看到这里包含了所有的三方库的相关信息，包括名字，协议，描述，Github 地址，支持平台等。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="attr">"name"</span>: <span class="string">"Alamofire"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"4.0.0"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"summary"</span>: <span class="string">"Elegant HTTP Networking in Swift"</span>,</div><div class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/Alamofire/Alamofire"</span>,</div><div class="line">  <span class="attr">"social_media_url"</span>: <span class="string">"http://twitter.com/AlamofireSF"</span>,</div><div class="line">  <span class="attr">"authors"</span>: &#123;</div><div class="line">    <span class="attr">"Alamofire Software Foundation"</span>: <span class="string">"info@alamofire.org"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"source"</span>: &#123;</div><div class="line">    <span class="attr">"git"</span>: <span class="string">"https://github.com/Alamofire/Alamofire.git"</span>,</div><div class="line">    <span class="attr">"tag"</span>: <span class="string">"4.0.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"platforms"</span>: &#123;</div><div class="line">    <span class="attr">"ios"</span>: <span class="string">"8.0"</span>,</div><div class="line">    <span class="attr">"osx"</span>: <span class="string">"10.9"</span>,</div><div class="line">    <span class="attr">"tvos"</span>: <span class="string">"9.0"</span>,</div><div class="line">    <span class="attr">"watchos"</span>: <span class="string">"2.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"source_files"</span>: <span class="string">"Source/*.swift"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在查找到对应文件夹后，进行 json 数据解析，获得三方库的 repo 地址，调用本地 git 命令拉取源码，拉取完成后调用本地 xcodebuild 命令把三方库编译为 Framework。</p>
<h4 id="pod-setup-设置pod仓库-执行流程可分为如下步骤"><a href="#pod-setup-设置pod仓库-执行流程可分为如下步骤" class="headerlink" title="pod setup 设置pod仓库,执行流程可分为如下步骤:"></a>pod setup 设置pod仓库,执行流程可分为如下步骤:</h4><p>1.判断 ~/.cocoapods/repo目录是否存在</p>
<p>2.存在，依次调用 set_master_repo_url，set_master_repo_branch，update_master_repo 三个函数分别设置 repo 主分支地址，git checkout 到主分支，拉取主分支代码，更新repo</p>
<p>3.不存在，添加主分支 repo</p>
<h4 id="Podfile-lock"><a href="#Podfile-lock" class="headerlink" title="Podfile.lock"></a>Podfile.lock</h4><p>这是 CocoaPods 创建的最重要的文件之一。它记录了需要被安装的 pod 的每个已安装的版本。如果你想知道已安装的 pod 是哪个版本，可以查看这个文件。推荐将 Podfile.lock 文件加入到版本控制中，这有助于整个团队的一致性。</p>
<h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><p>1.若 Podfile 中指定 Alamofire 的版本号为 4.2.0,但本地 ~/cocoapods/repo/master/Specs/Alamofire 中并没有此版本号，此时使用 pod install –no-repo-update 会出现错误;<br>2.我们便可以手动在 ~./cocoapods/repo/master/Specs 中添加我们需要的三方库版本信息，避免了把所有的并没有使用到的三方库信息更新到本地。<br>3.这样可以避免更新的内容过大就会,等待很久。</p>
<h4 id="原理和说明"><a href="#原理和说明" class="headerlink" title="原理和说明"></a>原理和说明</h4><p>1、第三方库会被编译成.a静态库供我们真正的工程使用。<br>CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程，该工程就放在刚才新生成的Pods目录下。整个第三方库工程会生成一个名称为libPods.a的静态库提供给我们自己的CocoaPodsTest工程使用。<br>对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中</p>
<p>2、CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数,tagert配置文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cocoapods-的工作流程&quot;&gt;&lt;a href=&quot;#Cocoapods-的工作流程&quot; class=&quot;headerlink&quot; title=&quot;Cocoapods 的工作流程&quot;&gt;&lt;/a&gt;Cocoapods 的工作流程&lt;/h2&gt;&lt;h4 id=&quot;pod-install-执
    
    </summary>
    
      <category term="原理" scheme="https://sukeyang.github.io/categories/%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS CocoaPods安装使用错误记录</title>
    <link href="https://sukeyang.github.io/2016/08/02/CocoaPods%E5%AE%89%E8%A3%85/"/>
    <id>https://sukeyang.github.io/2016/08/02/CocoaPods安装/</id>
    <published>2016-08-02T08:40:33.000Z</published>
    <updated>2017-02-27T06:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-gem-install-cocoapods"><a href="#1-gem-install-cocoapods" class="headerlink" title="1.gem install cocoapods"></a>1.gem install cocoapods</h1><pre><code>ERROR:  While executing gem ... (Errno::EPERM)
Operation not permitted - /usr/bin/pod
</code></pre><p>  用下面命名安装<br>  <a id="more"></a><br>    sudo gem install -n /usr/local/bin cocoapods</p>
<h1 id="2-更换更新数据源国内镜像-每天都更新code-net"><a href="#2-更换更新数据源国内镜像-每天都更新code-net" class="headerlink" title="2.更换更新数据源国内镜像,每天都更新code.net"></a>2.更换更新数据源国内镜像,每天都更新<a href="https://git.coding.net/CocoaPods/Specs.git" target="_blank" rel="external">code.net</a></h1><pre><code>pod repo remove master
pod repo add master https://git.coding.net/CocoaPods/Specs.git    
pod setup
</code></pre><h1 id="3-常用更新安装命名-不进行本地库更新"><a href="#3-常用更新安装命名-不进行本地库更新" class="headerlink" title="3.常用更新安装命名,不进行本地库更新"></a>3.常用更新安装命名,不进行本地库更新</h1><p>更新</p>
<pre><code>pod update --verbose --no-repo-update 
</code></pre><p>安装</p>
<pre><code>pod install --verbose --no-repo-update
</code></pre><h1 id="4-安装和卸载pod"><a href="#4-安装和卸载pod" class="headerlink" title="4 安装和卸载pod"></a>4 安装和卸载pod</h1><pre><code>sudo gem uninstall cocoapods  卸载
sudo gem install cocoapods    指定版本追加(-v 0.39) 安装
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-gem-install-cocoapods&quot;&gt;&lt;a href=&quot;#1-gem-install-cocoapods&quot; class=&quot;headerlink&quot; title=&quot;1.gem install cocoapods&quot;&gt;&lt;/a&gt;1.gem install cocoapods&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;ERROR:  While executing gem ... (Errno::EPERM)
Operation not permitted - /usr/bin/pod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  用下面命名安装&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://sukeyang.github.io/tags/tools/"/>
    
      <category term="效率" scheme="https://sukeyang.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>git使用技巧</title>
    <link href="https://sukeyang.github.io/2016/07/20/git%E4%BD%BF%E7%94%A8/"/>
    <id>https://sukeyang.github.io/2016/07/20/git使用/</id>
    <published>2016-07-20T01:55:28.000Z</published>
    <updated>2017-02-21T02:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssh-key的作用"><a href="#ssh-key的作用" class="headerlink" title="ssh-key的作用"></a>ssh-key的作用</h2><p>我们使用ssh登录服务器时，一般常见的会使用用户名/密码方式登录，<br>也可以使用ssh key实行免密码登录，一般现在这种方式被Git服务器使用的比较多。</p>
<h2 id="解决本地多个ssh-key的配置"><a href="#解决本地多个ssh-key的配置" class="headerlink" title="解决本地多个ssh-key的配置"></a>解决本地多个ssh-key的配置</h2><p>1.生成不同的密钥,ssh会根据登陆不同的域来读取相应的私钥文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa<span class="selector-class">.work</span> -C <span class="string">"Key for Work"</span>  </div><div class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa<span class="selector-class">.github</span> -C <span class="string">"Key for GitHub"</span></div></pre></td></tr></table></figure>
<p>在 <code>~/.ssh/config</code> 目录内修改文件config</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Host *<span class="selector-class">.workdomain</span><span class="selector-class">.com</span>   </div><div class="line">  </div><div class="line">    IdentityFile ~/.ssh/id_rsa<span class="selector-class">.work</span>  </div><div class="line">    User lee  </div><div class="line">   </div><div class="line">Host github<span class="selector-class">.com</span>  </div><div class="line">    IdentityFile ~/.ssh/id_rsa<span class="selector-class">.github</span>  </div><div class="line">    User git</div></pre></td></tr></table></figure>
<p>用下面的命令测试一下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>
<p>返回成功</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi sukeyang! You<span class="symbol">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>
<p>1.提示 WARNING: UNPROTECTED PRIVATE KEY FILE!  </p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@</span></div><div class="line">@         WARNING: UNPROTECTED PRIVATE <span class="built_in">KEY</span> FILE!          <span class="comment">@</span></div><div class="line">@<span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></div><div class="line">Permissions <span class="number">0644</span> <span class="keyword">for</span> '/Users/yangshuo/.ssh/winid_rsa' are too <span class="keyword">open</span>.</div><div class="line">It is required that your private <span class="built_in">key</span> files are <span class="keyword">NOT</span> accessible by others.</div><div class="line">This private <span class="built_in">key</span> will be ignored.</div></pre></td></tr></table></figure>
<p>解决办法：在命令行输入chmod 700 id_rsa.github即可。这里“id_rsa.githu”就是warning里给出的密钥文件名。<br>2.报错No submodule mapping found in .gitmodules for path;</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git submodule status</div><div class="line">git rm --cached Classes/<span class="class"><span class="keyword">lib</span>/<span class="title">AFKissXMLRequestOperation</span></span></div></pre></td></tr></table></figure>
<p>查看状态,Classes/lib/AFKissXMLRequestOperation<br>为要删除的路径,然后就oK了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ssh-key的作用&quot;&gt;&lt;a href=&quot;#ssh-key的作用&quot; class=&quot;headerlink&quot; title=&quot;ssh-key的作用&quot;&gt;&lt;/a&gt;ssh-key的作用&lt;/h2&gt;&lt;p&gt;我们使用ssh登录服务器时，一般常见的会使用用户名/密码方式登录，&lt;br&gt;也
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>升级iOS10后，部分App更新之后无法联网怎么办？</title>
    <link href="https://sukeyang.github.io/2016/07/03/%E9%83%A8%E5%88%86App%E6%9B%B4%E6%96%B0%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/"/>
    <id>https://sukeyang.github.io/2016/07/03/部分App更新无法联网/</id>
    <published>2016-07-03T04:00:58.000Z</published>
    <updated>2017-03-03T01:05:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>苹果在iOS10中，增加了“使用无线局域网与蜂窝移动应用”的功能。有些App升级后默认关闭了数据使用，导致无法联网</strong></p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1:"></a>方法1:</h3><p>进入“设置-&gt;蜂窝移动网络-&gt;使用无线局域网与蜂窝移动的应用”（或者“设置-&gt;无线局域网-&gt;使用无线局域网与蜂窝移动的应用”），找到无法联网的App，允许其“使用数据”即可。</p>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2:"></a>方法2:</h3><p>另外还有一种Bug情况：在该列表中找不到这款无法联网的App。</p>
<ul>
<li><p>此时，在列表中任意选择一个App，先关闭“无线局域网与蜂窝移动数据“，即不允许其使用数据。然后再重新打开允许使用“无线局域网与蜂窝移动数据”。</p>
</li>
<li><p>返回桌面，再次打开刚才无法联网的App，这时候系统会提示“是否允许App使用数据网络”，点击“允许”，App即可顺利联网使用。</p>
</li>
</ul>
<h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3:"></a>方法3:</h3><p>重启手机,进入app,会进行提示!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;苹果在iOS10中，增加了“使用无线局域网与蜂窝移动应用”的功能。有些App升级后默认关闭了数据使用，导致无法联网&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法1&quot;&gt;&lt;a href=&quot;#方法1&quot; class=&quot;headerlink&quot; title=&quot;方法1:
    
    </summary>
    
      <category term="iphone" scheme="https://sukeyang.github.io/categories/iphone/"/>
    
    
  </entry>
  
  <entry>
    <title>省心英语简介</title>
    <link href="https://sukeyang.github.io/2016/06/08/shengxin/"/>
    <id>https://sukeyang.github.io/2016/06/08/shengxin/</id>
    <published>2016-06-08T11:21:41.000Z</published>
    <updated>2017-03-06T11:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="http://a.app.qq.com/o/simple.jsp?pkgname=com.xiaobin.ncenglish" target="_blank" rel="external">下载地址</a></h2><p>##【产品简介】<br>新概念英语，是享誉全球的最为经典地道的英语教材!<br>新概念英语，是专为中国的英语学习人士设计的英语教材!</p>
<p>《省心新概念英语》是迄今为止最实用的新概念英语学习软件!<br>《省心新概念英语》Iphone应用系列由省心工作室出品！包含新概念英语1-4全册有声英语教程：课文双语对照、音频文本 同步播放、权威详解、课后练习配套辅导。同时覆盖英文单词翻译，音标课堂、英语语法词汇、英语基础口语、英语谚语、聊天会话场景等学习教材，帮你快速提高英语水平!学好新概念英语全四册，就能说一口流利的英语！</p>
<p>##【产品简介】</p>
<ul>
<li><p>作为英语学习敲门砖的第一册，到体味英语精髓的第四册，轻轻松松从英语零基础直达大学六级水平！<br>如果你什么都不会，你可从 第一册 学起。</p>
</li>
<li><p>如果你有初高中水平，那第二册是一个开始学习是个不错的选择。<br>第二册学完后，你就可以进行简单的英语交流了，相当于一个大学一年级的水平。 </p>
</li>
<li><p>第三册就是考四级的内容了，三册完成学习后，考英语4级就没问题了。<br>如果你还想继续更精通英语的话，那你可以选择第四册了。 </p>
</li>
<li><p>第四册会让你开阔你的视野，用英语从人文，地理，历史，哲学等方面<br>讲解西方文化，熟悉英语的根源，第四册不止是学习英语，更多是运用和精通英语。同时练就你流利的英语口语，和你的阅读能力。 如果你认真学习完四册。 你将达到一个英语六级以上的水平， 理论上，交流和阅读。</p>
</li>
</ul>
<p>##【丰富的学习资料】<br>内容涵盖中英翻译，查单词，在线聊天翻译，语音打分，voa听力，双语资讯，每日一句，学习交流圈子等内容，基础课模块内容覆盖音标课堂、英语语法、英语基础口语、英语谚语、聊天会话场景等不同的学习资料，注重系统性和进阶性。不论你是新手上路还是资深英语爱好者，都能找到适合自己学习素材。</p>
<p>##【用户评价】<br>用户1：背单词,英文单词翻译,新概念英语等资料丰富，适合持续学习，是一本不错的新概念英语学习资料！希望继续加油！</p>
<p>用户2：从新概念到背单词，免费无广告堪称业界良心，希望越做越好！</p>
<p>用户3：秒杀一切同类新概念英语软件！适合初中英语学习者！</p>
<p>用户4：很适合新概念英语学习,新概念英语全四册内容全面,不错的英语学习工具！</p>
<p>##【联系我们】<br>QQ: 781998178</p>
<p><a href="https://sukeyang.github.io/shengxinhelp.html">常见问题?</a></p>
<p><a href="https://sukeyang.github.io/SXStatement.txt">版权声明</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://a.app.qq.com/o/simple.jsp?pkgname=com.xiaobin.ncenglish&quot; t
    
    </summary>
    
      <category term="iphone" scheme="https://sukeyang.github.io/categories/iphone/"/>
    
    
  </entry>
  
</feed>
